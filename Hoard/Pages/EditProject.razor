@page "/project"
@page "/project/{id}"
@using Hoard.Data
@using Microsoft.AspNetCore.Components
@inject IUriHelper UriHelper
@inject HoardDataService DataService
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="container">
    <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
        <h3>Edit Project</h3>
        <div class="input-group">
            <button type="button" class="btn btn-primary pull-right" @onclick=@OnSave>Save</button>
            <button type="button" class="btn btn-primary pull-right ml-3" @onclick=@OnCancel>Cancel</button>
        </div>
    </div>
</div>

<div class="container mt-4">
    <div class="row">
        <div class="col-12 px-3">
            <div class="form-group mx-0 row border rounded">

                <label class="col-sm-2 col-form-label bg-light border-right border-bottom text-truncate">Name</label>
                <div class="col-sm-10 border-bottom px-2">
                    <input type="text" class="form-control border-0" id="input2" @bind=@Name />
                </div>

                <label class="col-sm-2 col-form-label bg-light border-right border-bottom text-truncate">Description</label>
                <div class="col-sm-10 border-bottom px-2">
                    <textarea type="text" rows="3" class="form-control border-0" id="input1" @bind="@Description" />
                </div>
            </div>
        </div>
    </div>
</div>



@code
{
    [Parameter]
    public string Id { get; set; }

    public Hoard.Data.Project SelectedProject;

    public string Name { get; set; }
    public string Description { get; set; }

    protected async override Task OnInitAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if(user.Identity.IsAuthenticated)
        {
            if (string.IsNullOrEmpty(Id))
            {
                SelectedProject = new Hoard.Data.Project();
                SelectedProject.UserId = user.Identity.Name;
            }
            else
            {
                SelectedProject = await DataService.GetProjectByIdAsync(Id, user.Identity.Name);
                if (SelectedProject == null)
                {
                    // error
                }
            }

            Name = SelectedProject?.Name;
            Description = SelectedProject?.Description;
        }
    }


    public async void OnSave(UIMouseEventArgs e)
    {
        SelectedProject.Name = Name;
        SelectedProject.Description = Description;

        await DataService.SaveProjectAsync(SelectedProject);

        UriHelper.NavigateTo("/", true);
    }

    public void OnCancel(UIMouseEventArgs e)
    {
        UriHelper.NavigateTo("/", true);
    }
}