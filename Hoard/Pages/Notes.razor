
@page "/project/{id}/notes"
@using Hoard.Data
@using Microsoft.AspNetCore.Components
@inject IUriHelper UriHelper
@inject HoardDataService DataService
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="container">
    <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
        <h3>Notes</h3>
        <div class="input-group">
            <button type="button" class="btn btn-primary pull-right" @onclick=@OnNewEntry>New Note</button>
        </div>
    </div>
</div>

<br />

<div class="container">
    <div class="input-group">
        <input type="text" class="form-control" @bind=@Search aria-label="Search" />
        <select id="select-box" @onchange=@OnPageSizeSelectionChange class="browser-default custom-select input-group-append col-md-1 d-none d-lg-table-cell">
            <option value="10">10</option>
            <option value="25">25</option>
            <option value="50" selected>50</option>
            <option value="100">100</option>
        </select>
        <select id="select-box" @onchange=@OnSortSelectionChange class="browser-default custom-select input-group-append col-md-2">
            <option value="score">Score</option>
            <option value="created" selected>Created</option>
            <option value="edited">Edited</option>
        </select>
        <select id="select-box" @onchange=@OnOrderSelectionChange class="browser-default custom-select input-group-append col-md-2 d-none d-lg-table-cell">
            <option value="descending" selected>Descending</option>
            <option value="ascending">Ascending</option>
        </select>
        <button type="button" @onclick=@OnSearch class="form-control col-md-2">Search</button>
    </div>
    <br />

    @if (SearchResult != null && SearchResult.Results.Count > 0)
    {
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th class="col-md-6">Text</th>
                    <th class="d-none d-lg-table-cell">Created</th>
                    <th class="d-none d-lg-table-cell">Modified</th>
                    <th class="d-none d-lg-table-cell">Score</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var note in SearchResult.Results)
                {
                    var id = note.Id;
                <tr>
                    @if (note.TextContent.Length > CharacterLimit)
                    {
                        <td>@note.TextContent.Substring(0, CharacterLimit) ...</td>
                    }
                    else
                    {
                        <td>@note.TextContent</td>
                    }
                    <td class="d-none d-lg-table-cell">@note.Created</td>
                    <td class="d-none d-lg-table-cell">@note.Modified</td>
                    <td class="d-none d-lg-table-cell">@string.Format("{0:0.00}", note.Score ?? 0)</td>
                    <td>
                        <a href="project/@Id/note/@note.Id">
                            <span class="oi oi-pencil" aria-hidden="true" />
                        </a>
                        <a href="javascript:void(0)" @onclick=@(() => OnDeleteNote(id))>
                            <span class="oi oi-trash pl-2" aria-hidden="true" />
                        </a>
                    </td>
                </tr>
                }
            </tbody>
        </table>

        <br />

        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-end">

                @if (CurrentPage == 0)
                {
                    <li class="page-item disabled">
                        <a class="page-link" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                            <span class="sr-only">Previous</span>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" aria-label="Previous" @onclick=@(() => OnChangePage(-1))>
                            <span aria-hidden="true">&laquo;</span>
                            <span class="sr-only">Previous</span>
                        </a>
                    </li>
                }

                @for (int i = 0; i < TotalPages; i++)
                {
                    var index = i;
                    @if (i == CurrentPage)
                    {
                        <li class="page-item active"><a class="page-link">@(i + 1)</a></li>
                    }
                    else
                    {
                        <li class="page-item"><a class="page-link" @onclick=@(() => OnChangePage(index))>@(i + 1)</a></li>
                    }
                }

                @if (CurrentPage < TotalPages - 1)
                {
                    <li class="page-item">
                        <a class="page-link" aria-label="Next" @onclick=@(() => OnChangePage(int.MaxValue))>
                            <span aria-hidden="true">&raquo;</span>
                            <span class="sr-only">Next</span>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <a class="page-link" href="#" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                            <span class="sr-only">Next</span>
                        </a>
                    </li>
                }

            </ul>
        </nav>
    }
    else
    {
        <div class="alert alert-primary" role="alert">
            No results available
        </div>
    }

</div>


@code
{
    [Parameter]
    public string Id { get; set; }

    public string Search { get; set; }
    public int PageSize { get; set; } = 50;
    public string Sort { get; set; } = "created";
    public string Order { get; set; } = "descending";
    public int CharacterLimit { get; set; } = 250;

    public long TotalPages { get; set; }
    public long CurrentPage { get; set; }
    public NoteQueryResult SearchResult { get; set; }


    protected async override Task OnInitAsync()
    {
        var userId = await UserIdentityName();
        if (userId == null) return;

        if (!string.IsNullOrEmpty(Id))
        {
            // create the query
            var query = new Hoard.Data.Query
            {
                ProjectId = Id,
                UserId = userId,
                Search = Search,
                Sort = Sort,
                Take = PageSize,
                IsAscending = Order == "ascending" ? true : false
            };

            SearchResult = await DataService.SearchNotes(query);
            TotalPages = SearchResult.Total / PageSize + (SearchResult.Total % PageSize > 0 ? 1 : 0);
            CurrentPage = 0;
        }
    }

    private async Task OnPageSizeSelectionChange(UIChangeEventArgs args)
    {
        var pageSize = int.Parse(args.Value.ToString());
        if(pageSize != PageSize)
        {
            PageSize = pageSize;
            await OnSearch(null);
        }
    }

    public async void OnChangePage(int pageIndex)
    {
        var userId = await UserIdentityName();
        if (userId == null) return;

        // calculate skip
        int skip = SearchResult.Query.Skip;
        if(pageIndex == int.MaxValue)
        {
            skip += PageSize;
        }
        else if(pageIndex == -1)
        {
            skip -= PageSize;
        }
        else
        {
            skip = pageIndex * PageSize;
        }

        // create the query
        var query = new Hoard.Data.Query
        {
            ProjectId = Id,
            UserId = userId,
            Search = Search,
            Sort = Sort,
            Take = PageSize,
            Skip = skip,
            IsAscending = Order == "ascending" ? true : false
        };

        SearchResult = await DataService.SearchNotes(query);
        TotalPages = SearchResult.Total / PageSize + (SearchResult.Total % PageSize > 0 ? 1 : 0);
        CurrentPage = skip / PageSize;

        this.StateHasChanged();
    }

    public void OnNewEntry(UIMouseEventArgs e)
    {
        UriHelper.NavigateTo($"/project/{Id}/note");
    }

    public async Task OnDeleteNote(string id)
    {
        var userId = await UserIdentityName();
        if (userId == null) return;

        await DataService.DeleteNoteAsync(id, userId);
        await OnSearch(null);
        
    }

    private async void OnSortSelectionChange(UIChangeEventArgs args)
    {
        Sort = args.Value.ToString();
    }

    private async void OnOrderSelectionChange(UIChangeEventArgs args)
    {
        Order = args.Value.ToString();
    }

    public async Task OnSearch(UIMouseEventArgs e)
    {
        var userId = await UserIdentityName();
        if (userId == null) return;

        // create the query
        var query = new Query
        {
            ProjectId = Id,
            UserId = userId,
            Search = Search,
            Sort = Sort,
            IsAscending = Order == "ascending" ? true : false
        };

        SearchResult = await DataService.SearchNotes(query);
        TotalPages = SearchResult.Total / PageSize + (SearchResult.Total % PageSize > 0 ? 1 : 0);
        CurrentPage = 0;

        this.StateHasChanged();
    }

    private async Task<string> UserIdentityName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            return user.Identity.Name;
        }

        return null;
    }
}
