
@page "/project/{ProjectId}/note"
@page "/project/{ProjectId}/note/{NoteId}"
@using Hoard.Data
@using Microsoft.AspNetCore.Components
@inject IUriHelper UriHelper
@inject HoardDataService DataService
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="container">
    <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
        <h3>Edit Note</h3>
        <div class="input-group">
            <button type="button" class="btn btn-primary pull-right" @onclick=@OnSave>Save</button>
            <button type="button" class="btn btn-primary pull-right ml-3" @onclick=@OnCancel>Cancel</button>
        </div>
    </div>
</div>

<div class="container mt-4">
    <div class="row">
        <div class="col-12 px-3">
            <div class="form-group mx-0 row border rounded">

                <label class="col-sm-2 col-form-label bg-light border-right border-bottom text-truncate">Text</label>
                <div class="col-sm-10 border-bottom px-2">
                    <textarea type="text" rows="15" class="form-control border-0" id="input1" @bind="@TextContent" />
                </div>

            </div>
        </div>
    </div>
</div>


@code
{
    [Parameter]
    public string ProjectId { get; set; }

    [Parameter]
    public string NoteId { get; set; }

    public Note SelectedNote { get; set; }

    // fields
    public string TextContent { get; set; }


    protected async override Task OnInitAsync()
    {
        var userId = await UserIdentityName();
        if (userId == null) return;

        if (!string.IsNullOrEmpty(NoteId))
        {
            SelectedNote = await DataService.GetNoteById(NoteId, userId);
        }
        else
        {
            SelectedNote = new Note
            {
                Created = DateTime.Now,
                ProjectId = ProjectId,
                UserId = userId
            };
        }

        TextContent = SelectedNote.TextContent;

    }

    public async void OnSave(UIMouseEventArgs e)
    {
        SelectedNote.Modified = DateTime.UtcNow;
        SelectedNote.TextContent = TextContent;

        await DataService.SaveNoteAsync(SelectedNote);

        UriHelper.NavigateTo($"/project/{ProjectId}/notes", true);
    }

    public void OnCancel(UIMouseEventArgs e)
    {
        UriHelper.NavigateTo($"/project/{ProjectId}/notes", true);
    }

    private async Task<string> UserIdentityName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            return user.Identity.Name;
        }

        return null;
    }
}
