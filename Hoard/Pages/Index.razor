@page "/"
@using Hoard.Data
@using Microsoft.AspNetCore.Components
@using BlazorStrap;
@inject IUriHelper UriHelper
@inject HoardDataService DataService
@inject AuthenticationStateProvider AuthenticationStateProvider

<base href="/" />

<AuthorizeView>
    <Authorized>

        <div class="container">
            <div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
                <h3>Projects</h3>
                <div class="input-group">
                    <button type="button" class="btn btn-primary pull-right" @onclick=@OnNewProject>New Project</button>
                </div>
            </div>
        </div>

        <br />

        <div class="container">
            @if (Projects == null || Projects.Count == 0)
            {
                <div class="alert alert-dark" role="alert">
                    You don't have any projects yet
                </div>
            }
            else
            {
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th class="d-none d-lg-table-cell">Entries</th>
                            <th class="d-none d-lg-table-cell">Notes</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var project in Projects)
                        {
                            var id = project.Id;

                            <tr>
                                <td><a href="project/@project.Id/entries">@project.Name</a></td>
                                <td>@project.Description</td>
                                <td class="d-none d-lg-table-cell">@EntriesByProjectId[project.Id]</td>
                                <td class="d-none d-lg-table-cell">@NotesByProjectId[project.Id]</td>
                                <td>
                                    <a href="project/@project.Id/notes">
                                        <span class="oi oi-clipboard" aria-hidden="true" />
                                    </a>
                                    <a href="project/@project.Id">
                                        <span class="oi oi-pencil pl-1" aria-hidden="true" />
                                    </a>
                                    <a href="javascript:void(0)" @onclick=@(() => OnDeleteProject(id))>
                                        <span class="oi oi-trash pl-1" aria-hidden="true" />
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>

    </Authorized>
    <NotAuthorized>
        You're not logged in.
    </NotAuthorized>
</AuthorizeView>


@code
{
    public List<Hoard.Data.Project> Projects;
    public Dictionary<string, long> NotesByProjectId { get; set; } = new Dictionary<string, long>();
    public Dictionary<string, long> EntriesByProjectId { get; set; } = new Dictionary<string, long>();

    protected async override Task OnInitAsync()
    {
        var userId = await UserIdentityName();
        if (userId == null) return;

        Projects = await DataService.GetProjectsAsync(userId);
        foreach(var project in Projects)
        {
            var count = await DataService.CountEntriesByProjectId(project.Id, userId);
            EntriesByProjectId.Add(project.Id, count);

            count = await DataService.CountNotesByProjectId(project.Id, userId);
            NotesByProjectId.Add(project.Id, count);
        }
    }

    public void OnNewProject(UIMouseEventArgs e)
    {
        UriHelper.NavigateTo("project");
    }

    public async Task OnDeleteProject(string id)
    {
        var userId = await UserIdentityName();
        if (userId == null) return;

        var project = Projects.FirstOrDefault(x => x.Id == id);
        if(project != null)
        {
            await DataService.DeleteProjectAsync(id, userId);
            Projects.Remove(project);
            this.StateHasChanged();
        }
        
    }

    private async Task<string> UserIdentityName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            return user.Identity.Name;
        }

        return null;
    }
}